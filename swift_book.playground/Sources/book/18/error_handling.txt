
//------------ ERROR HANDLING


enum VendingmachineError: Error {
    case invalidSelection
    case insufficientFunds(coinsNeeded: Int)
    case outOfStock
}

//throw VendingmachineError.insufficientFunds(coinsNeeded: 5)


// BASIC SYNTAX

func canThrowErrors() throws -> String { return "" }
func cannotThrowErrors() -> String { return "" }


// PROPGATION

struct Item {
    var price: Int
    var count: Int
}

class VendingMachine {
    var inventory = [
        "Candy Bar": Item(price: 12, count: 7),
        "Chips": Item(price: 10, count: 4),
        "Pretzels": Item(price: 7, count: 11)
    ]
    var coinsDeposited = 0

    func vend(itemNamed name: String) throws {
        guard let item = inventory[name] else {
            throw VendingmachineError.invalidSelection
        }
        guard item.count > 0 else {
            throw VendingmachineError.outOfStock
        }
        guard item.price <= coinsDeposited else {
            throw VendingmachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)
        }
                
        coinsDeposited -= item.price
        
        var newItem = item
        newItem.count -= 1
        inventory[name] = newItem
        
        print("Dispensing \(name)")
    }
}

let favoriteSnack = [
    "Alice": "Chips",
    "Bob": "Licorice",
    "Eve": "Pretzel"
]
func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {
    let snackName = favoriteSnack[person] ?? "Candy bar"
    try vendingMachine.vend(itemNamed: snackName) // .vend() errors will propagate upto here
    // and continue progating because vendingMachine() is a throwing function
}

struct PurchasedSnack {
    let name: String
    init(name: String, vendingMachine: VendingMachine) throws {
        try vendingMachine.vend(itemNamed: name)
        self.name = name
    }
}


// ERROR HANDLING DO-CATCH

var vendingMachine = VendingMachine()
vendingMachine.coinsDeposited = 8
do {
    try buyFavoriteSnack(person: "Alice", vendingMachine: vendingMachine)
    print("Succes! yum.")
} catch VendingmachineError.invalidSelection {
    print("Invalid Selection")
} catch VendingmachineError.outOfStock {
    print("Out of stock")
} catch VendingmachineError.insufficientFunds(coinsNeeded: let coinsNeeded) {
    print("Insufficient funds, you are \(coinsNeeded) coins short")
} catch {
    print("Unexpected error: \(error)")
}


func nourish(with item: String) throws {
    do {
        try vendingMachine.vend(itemNamed: item)
    } catch is VendingmachineError {
        print("Invalid selection, out of stock, or not enough money.")
    }
}

do {
    try nourish(with: "Beet-Flavored Chips")    // nourish() already catches so it won't be propagated
} catch {
    print("Unexpected non-vending related error: \(error)")
}


// CONVERTING ERRORS TO OPTIONAL VALUES
func someThrowingFunction() throws -> Int {
    return 0
}
let x = try? someThrowingFunction()     // returns Int? if succesful
let y: Int?
do {
    y = try someThrowingFunction()      // returns Int? if succesful
} catch {
    y = nil
}

struct Data {}
func fetchDataFromDisk() throws {}
func fetchDataFromServer() throws {}
func fetchData() -> Data? {
    if let data = try? fetchDataFromDisk() { return Data() }
    if let data = try? fetchDataFromServer() { return Data() }
    return nil
}


// DISABLING ERROR PROPAGATION
func loadImage(atPath: String) throws {}
let photo = try! loadImage(atPath: "./Resource/JohnAppleseed.jpg")
// photo is contained in the app so we can be sure no error will be thrown


// CLEANUP
// commented out because is calling iOS methods
/*
func processFile(filename: String) throws {
    if exists(filename) {
        let file = open(filename)
        defer {
            close(file)
        }
        while let line = try file.readline() {
            // do file stuff
        }
        // defer is called here (close file)
    }
}
*/

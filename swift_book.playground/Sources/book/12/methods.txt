//------------ METHODS


// INSTANCE METHODS

class Counter {
    var count = 0
    func increment() {
        count += 1  // self.count += 1
    }
    func increment(by amount: Int) {
        count += amount
    }
    func reset() {
        count = 0
    }
}

let counter = Counter()
counter.count
counter.increment()
counter.count
counter.increment(by: 5)
counter.count
counter.reset()
counter.count

// solving param name vs. prop ambiguities
struct Point {
    var x = 0.0, y = 0.0
    func isToTheRightOf(x: Double) -> Bool {
        return self.x > x
    }
}
let somePoint = Point(x: 4.0, y: 5.0)
if somePoint.isToTheRightOf(x: 1.0) {
    print("point to the right where x == 1.0")
}
    

// MUTATING VALUE-TYPES
struct MutatingPoint {
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        x += deltaX
        y += deltaY
    }
}
var someMutatingPoint = MutatingPoint(x: 1.0, y: 1.0)
someMutatingPoint.moveBy(x: 2.0, y: 1.0)
someMutatingPoint.x
someMutatingPoint.y

let fixedPoint = MutatingPoint(x: 3.0, y: 3.0)
//fixedPoint.moveBy(x: 2.0, y: 3.0)     // can't mutate a prop of const intance

// asign to self using a type instance
struct SelfPoint {
    var x = 0.0; var y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        self = SelfPoint(x: x + deltaX, y: y + deltaY)
    }
}

// self-reference for enum cases
enum TriStateSwitch {
    case off, low, high
    
    mutating func next() {
        switch self {
        case .off:
            self = .low
        case .low:
            self = .high
        case .high:
            self = .off
        }
    }
}

var ovenLight = TriStateSwitch.low
ovenLight.next()
ovenLight.next()


// TYPE METHODS

class SomeClass {
    class func someTypeMethod() {
        // type method implementation here
    }
}
SomeClass.someTypeMethod()


struct LevelTracker {
    static var highestUnlockedLevel = 1 // for ANY player
    var currentLevel = 1
    
    static func unlock(_ level: Int) {
        if level > highestUnlockedLevel {
            highestUnlockedLevel = level
        }
    }
    
    static func isUnlocked(_ level: Int) -> Bool {
        return level <= highestUnlockedLevel
    }
    
    @discardableResult
    mutating func advance(to level: Int) -> Bool {
        if LevelTracker.isUnlocked(level) {
            currentLevel = level
            return true
        } else {
            return false
        }
    }
}

class Player {
    var tracker = LevelTracker()
    let playerName: String
    func complete(level: Int) {
        LevelTracker.unlock(level + 1)
        tracker.advance(to: level + 1)
    }
    init(name: String) {
        playerName = name
    }
}

var player1 = Player(name: "Argyrios")
player1.complete(level: 1)
LevelTracker.highestUnlockedLevel

var player2 = Player(name: "Beto")
if player2.tracker.advance(to: 6) {
    print("player is now on level 6")
} else {
    print("level 6 has not yet been unlocked")
}


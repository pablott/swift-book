//------------ COLLECTIONS
//------------ ARRAYS


var someInts = [Int]()
type(of: someInts)
someInts.count

someInts.append(contentsOf: [3,5])


var threeDoubles = Array(repeating: Double(0.0), count: 3)
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
var sixDoubles = threeDoubles + anotherThreeDoubles

var shoppingList: [String] = ["Eggs", "Milk"]
shoppingList.count
shoppingList.isEmpty

shoppingList.append("Flour")
shoppingList += ["Baking Powder"]
shoppingList.count

shoppingList += ["Choco", "Cheese", "Butter"]
shoppingList.count

shoppingList[4...6] = ["Bananas", "Apples"]
shoppingList
shoppingList.count

shoppingList.insert("Maple Syrup", at: 0)
shoppingList.count

let removedItem = shoppingList.remove(at: 0)
removedItem
shoppingList
shoppingList.count

let removedLastItem = shoppingList.removeLast()
removedLastItem
shoppingList
shoppingList.count


//------------ ITERATING ON ARRAYS


for (index, value) in shoppingList.enumerated() {
//    print("\(index + 1): \(value)")
}


//------------ SETS


var letters = Set<Character>()
print("letters: \(letters.count)")

var c = letters.insert("a")
letters
type(of: letters)

letters = []
type(of: letters)

var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
favoriteGenres.count
if favoriteGenres.isEmpty {
    print("As far music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}


favoriteGenres.insert("Jazz")
favoriteGenres


if let removedGenre = favoriteGenres.remove("Rock") {
    print("\(removedGenre)")
} else {
    print("I've never cared about it.")
}


favoriteGenres.contains("Funk")


//------------ ITERATING OVER A SET


for genre in favoriteGenres {
    print(genre, terminator: " - ")
}
print("")
for genre in favoriteGenres.sorted() {
    print(genre, terminator: " - ")
}


//------------ SET OPERATIONS


let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]

var result = oddDigits.union(evenDigits).sorted()
type(of: result)
oddDigits.intersection(evenDigits).sorted()
oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()


let houseAnimals: Set = ["dog", "cat"]
let farmAnimals: Set = ["cow", "chicken", "sheep", "dog", "cat"]
let cityAnimals: Set = ["pigeon", "rat"]

houseAnimals.isSubset(of: farmAnimals)
farmAnimals.isSuperset(of: houseAnimals)
farmAnimals.isDisjoint(with: cityAnimals)


let companyA: Set = ["Alicia", "Bethany", "Diana"]
let companyB: Set = ["Alicia", "Bethany", "Diana"]
companyB.isStrictSubset(of: companyA) // false because it needs a different extra element


//------------ DICTIONARIES


var namesOfString = [Int: String]()
namesOfString[16] = "sixteen"
namesOfString = [:]
type(of: namesOfString)

var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
airports.count
airports.isEmpty

airports["LHR"] = "London"
airports
airports["LHR"] = "London Heathrow"
airports


type(of: airports.updateValue("Dublin Airport", forKey: "DUB"))
if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    type(of: oldValue)
    print("\(oldValue)")
} else {
    print("no such value")
}

type(of: airports["DUB"])
if let airportName = airports["DUB"] {
    print("\(airportName)")
} else {
    print("not in dict")
}

airports["APL"] = "Apple International"
airports
airports["APL"] = nil
airports

if let removedValue = airports.removeValue(forKey: "DUB") {
    print("\(removedValue)")
} else {
    print("no such value")
}


//------------ ITERATING DICTIONARIES


for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}

for airportCode in airports.keys {
    print(airportCode)
}

for airportName in airports.values {
    print(airportName)
}

for airport in airports {
    print(airport.key, airport.value)
}


let airportCodes = [String](airports.keys)
airportCodes
let airportNames = [String](airports.values)
airportNames


airports
airports.sorted(by: >)
airports.sorted(by: <)



//------------ FAILABLE INITIALIZERS


// FAILABLES FOR CLASSES

let wholeNumber: Double = 12345.0
let pi = 3.14159
type(of: wholeNumber)
type(of: pi)

if let valueMaintained = Int(exactly: wholeNumber) {
    print("\(wholeNumber) conversion to Int maintains value of \(valueMaintained)")
}

let valueChanged = Int(exactly: pi)

if valueChanged == nil {
    print("\(pi) conversion to Int does not maintain value \(String(describing: valueChanged))")
}

var maintainedFloat = Float(exactly: pi)


struct Animal {
    let species: String
    init?(species: String) {
        if species.isEmpty { return nil }
        self.species = species
    }
}

let someCreature = Animal(species: "Giraffe")
if let giraffe = someCreature {
    giraffe.species
}

let anonymousCreature = Animal(species: "")
if anonymousCreature == nil { print("could not init animal") }


// FAILABLES FOR ENUMS

enum TemperatureUnit {
    case kelvin, celsius, fahrenheit
    init?(symbol: Character) {
        switch symbol {
        case "K":
            self = .kelvin
        case "C":
            self = .celsius
        case "F":
            self = .fahrenheit
        default:
            return nil
        }
    }
}

let fahrenheitUnit = TemperatureUnit(symbol: "F")
if fahrenheitUnit != nil {
    print("This is a defined temperature unit, init succeeded.")
}

let unknowUnit = TemperatureUnit(symbol: "X")
if unknowUnit == nil {
    print("This is not a defined unit, init failed.")
}

// using raw value
enum TemperatureUnitWithRawVal: Character {
    case kelvin = "K", celsius = "C", fahrenheit = "F"
}
let fahrenheitUnitNew = TemperatureUnitWithRawVal(rawValue: "F")
if fahrenheitUnitNew != nil {
    print("this is a defined temperature")
}

let unknowUnitNew = TemperatureUnitWithRawVal(rawValue: "X")
if unknowUnitNew == nil {
    print("this is not a defined temperature unir, init failed")
}


// PROPAGATION OF INIT FAILURE

class Product {
    let name: String
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}

class CartItem: Product {
    let quantity: Int
    init?(name: String, quantity: Int) {
        if quantity < 1 { return nil }
        self.quantity = quantity
        super.init(name: name)
    }
}

if let twoSocks = CartItem(name: "sock", quantity: 2) {
    twoSocks.name
    twoSocks.quantity
}

if let zeroShirts = CartItem(name: "shirt", quantity: 0) {
    zeroShirts.name
    zeroShirts.quantity
} else {
    print("CarItem init failed, quantity too low")
}

if let oneUnnamed = CartItem(name: "", quantity: 1) {
    oneUnnamed.name
    oneUnnamed.quantity
} else {
    print("Product init failed, name is empty")
}


// OVERRIDE

class Document {
    var name: String?
    init() {}   // this init allows a nil name
    init?(name: String) {   // this init must use a non-empty string
        if name.isEmpty { return nil }
        self.name = name
    }
}

// overriding a init?
class AutomaticallyNamedDocument: Document {
    override init() {
        super.init()
        self.name = "[Unnamed]"
    }
    override init(name: String) {
        super.init()
        if name.isEmpty {
            self.name = "[Unnamed]"
        } else {
            self.name = name
        }
    }
}

// unwrapping super.init?
class UntitledDocument: Document {
    override init() {
        super.init(name: "[Untitled]")! // notice the unwrapp of super.init?
    }
}

// init! failable
// check explanation p. 345


// REQUIRED INITIALIZERS
class SomeClass {
    required init() {
        // implementation goes here
    }
}

class SomeSubClass: SomeClass {
    required init() {
        // implementation goes here
    }
}


// SETTING DEFAULT PROPS WITH COSURES

struct ChessBoard {
    let boardColors: [Bool] = {
        var temporaryBoard = [Bool]()
        var isBlack = false
        for i in 1...8 {
            for j in 1...8 {
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            }
            isBlack = !isBlack
        }
        return temporaryBoard
    }()
    
    func squareIsBlackAt(row: Int, column: Int) -> Bool {
        return boardColors[(row * 8) + column]
    }
}

let board = ChessBoard()
board.squareIsBlackAt(row: 0, column: 1)
board.squareIsBlackAt(row: 7, column: 7)

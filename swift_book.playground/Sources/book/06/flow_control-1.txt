//------------ FOR-IN


let names = ["Anna", "Alex", "Brian", "Jack"]
for name in names {
    print("Hello, \(name)!")
}


let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)s have \(legCount) legs")
}


for index in 1...5 {
    index
}


let base = 3
let power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
print("\(base) to the power of \(power) is \(answer)")


let minutes = 60
for tickMark in 0..<minutes {
    tickMark
}


let minuteInterval = 5
for tickmark in stride(from: 0, to: minutes, by: minuteInterval) {
    tickmark
}


let hours = 12
let hourInterval = 3
for tickMark in stride(from: 3, through: hours, by: hourInterval) {
    tickMark
}


//------------ WHILE


let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board.count

board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08

var square = 0
var diceRoll = 0
while square < finalSquare {
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    square += diceRoll
    if square < board.count {
        square += board[square]
        print(square)
    }
}
print("game over")


square = 0
diceRoll = 0
repeat {
    square += board[square]
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    square += diceRoll
//    if square < board.count {
        print(square)
//    }
} while square < finalSquare
print("game over")


//------------ IF


var temperatureInFarenheit = 90
if temperatureInFarenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
} else if temperatureInFarenheit >= 86 {
    print("It's really warm. Don't forget to wear sunscreen.")
} else {
    print("It's not that cold. Wear a t-shirt.")
}


//------------ SWITCH


let someCharacter: Character = "z"
switch someCharacter {
case "a":
    print("first letter")
case "B", "b":
    print("the second letter")
case "z":
    print("last letter")
default:
    "some other char"
}


// INTERVALS
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "any"
}
print("There are \(naturalCount) \(countedThings)")


// WILDCARDS
let somePoint = (0, 0)
switch somePoint {
case (0, 0):
    print("@ origin")
case (_, 0):
    print("on X axis")
case (0, _):
    print("on Y axis")
case (-2...2, -2...2):
    print("inside the box")
default:
    print("\(somePoint) is outside the box.")
}


// BINDING VALUES
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    print("on the x-axis with a value of \(x)")
case (0, let y):
    print("on the y-axis with a y value of \(y)")
case let (x, y):
    print("somewhere else at \(x), \(y)")
}


let yetAnotherPoint = (1, 1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("\(x), \(y) is on the line x == y")
case let (x, y) where x == -y:
    print("\(x), \(y) is on the line x == -y")
case let (x, y):
    print("\(x) \(y) is just some arbitrary point")
}


// COMBINED SWITCH
let someOtherCharacter: Character = "e"
switch someOtherCharacter {
case "a", "e", "i", "o", "u":
    print("\(someOtherCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
          "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    print("\(someCharacter) is a consonant")
default:
    print("\(someOtherCharacter) is not a vowel")
}


let stillAnotherPoint = (9, 0)
switch stillAnotherPoint {
case (let distance, 0), (0, let distance):
    print("On an axis, \(distance) from the origin")
default:
    print ("Not on an axis")
}


//------------ CONTROL TRANSFER STATEMENTS


// CONTINUE
let puzzleInput = "great minds think alike"
var puzzleOutput = ""
let charactersToRemove: [Character] = ["a", "e", "i", "o", "u", " "]
for character in puzzleInput {
    if charactersToRemove.contains(character) {
        continue
    }
    puzzleOutput.append(character)
}
puzzleOutput


// BREAK
let numberSymbol: Character = "三"
var possibleIntegerValue: Int?
switch numberSymbol {
case "1", "١", "一", "๑":
    possibleIntegerValue = 1
case "2", "٢", "二", "๒":
    possibleIntegerValue = 2
case "3", "٣", "三", "๓":
    possibleIntegerValue = 3
case "4", "٤", "四", "๔":
    possibleIntegerValue = 4
default:
    break
}

if let integerValue = possibleIntegerValue {
    print("the integer value of \(numberSymbol) is \(integerValue)")
} else {
    print("an integer value could not be found \(numberSymbol)")
}


// FALLTHROUGH
let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
case 6:             // NO CONDITION CHECK!! Just jump to next clause
    print("<<executed without condition check!>>")
default:
    description += " an integer"
}
description


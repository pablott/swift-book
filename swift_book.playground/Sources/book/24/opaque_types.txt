
//------------ OPAQUE TYPES


// THE PROBLEM

protocol Shape {
    func draw() -> String
}

struct Triangle: Shape {
    var size: Int
    func draw() -> String {
        var result = [String]()
        for length in 1...size {
            result.append(String(repeating: "*", count: length))
        }
        return result.joined(separator: "\n")
    }
}
let smallTriangle = Triangle(size: 3)
print(smallTriangle.draw())


struct FlippedShape<T: Shape>: Shape {
    var shape: T
    func draw() -> String {
        let lines = shape.draw().split(separator: "\n")
        return lines.reversed().joined(separator: "\n")
    }
}
let flippedTriangle = FlippedShape(shape: smallTriangle)
print(flippedTriangle.draw())


// JoinedShape<Triangle, FlippedShape<Triangle>>
struct JoinedShape<T: Shape, U: Shape>: Shape {
    var top: T
    var bottom: U
    func draw() -> String {
        return top.draw() + "\n" + bottom.draw()
    }
}
let joinedTriangles = JoinedShape(top: smallTriangle, bottom: flippedTriangle)
print(joinedTriangles.draw())
//type(of: joinedTriangles)
print("")


// SOLUTION: abstraction of return types with opaque types
struct Square: Shape {
    var size: Int
    func draw() -> String {
        let line = String(repeating: "*", count: size)
        let result = Array<String>(repeating: line, count: size)
        return result.joined(separator: "\n")
    }
}

func makeTrapezoid() -> some Shape {
    let top = Triangle(size: 2)
    let middle = Square(size: 2)
    let bottom = FlippedShape(shape: top)
    let trapezoid = JoinedShape(
        top: top,
        bottom: JoinedShape(top: middle, bottom: bottom)
    )
    return trapezoid
}
let trapezoid = makeTrapezoid()
print(trapezoid.draw())
//type(of: trapezoid)
print("")


// COMBINING OPAQUES & GENERICS
func flip<T: Shape>(_ shape: T) -> some Shape {
    return FlippedShape(shape: shape)
}
func join<T:Shape, U: Shape>(_ top: T, _ bottom: U) -> some Shape {
    JoinedShape(top: top, bottom: bottom)
}
let opaqueJoinedTriangles = join(smallTriangle, flip(smallTriangle))
print(opaqueJoinedTriangles.draw())


// invalid multiple returns
// Square & FlippedShape type mismatch
//func invalidShape<T: Shape>(_ shape: T) -> some Shape {
//    if shape is Square {
//        return shape
//    }
//    return FlippedShape(shape: shape)
//}

// solution to above:
// move condition into draw() implementation
struct FlippedShape2<T: Shape>: Shape {
    var shape: T
    func draw() -> String {
        if shape is Square {
            return shape.draw()
        }
        let lines = shape.draw().split(separator: "\n")
        return lines.reversed().joined(separator: "\n")
    }
}


// OPAQUE TYPES VS PROTOCOL TYPES

// PROTOCOL TYPES
func protoFlip<T: Shape>(_ shape: T) -> Shape {
    return FlippedShape(shape: shape)
}

func protoFlip2<T: Shape>(_ shape: T) -> Shape {
    if shape is Square {
        return shape
    }
    return FlippedShape(shape: shape)
}

// this fails because Shapes can't be compared
let protoFlippedTriangle = protoFlip(smallTriangle)
let sameThing = protoFlip(smallTriangle)
//protoFlippedTriangle == sameThing     // Error


// OPAQUE TYPES
protocol Container {
    associatedtype Item
    var count: Int { get }
    subscript(i: Int) -> Item { get }
}
extension Array: Container {}

//// Error: Protocol with associated types can't be used as a return type
//func makeProtocolContainer1<T>(item: T) -> Container {
//    return [item]
//}
//
//// Error: Not enough info to infer C
//func makeProtocolContainer2<T, C: Container>(item: T) -> C {
//    return [item]
//}

// solution to issues above
func makeOpaqueContainer<T>(item: T) -> some Container {
    return [item]
}
let opaqueContainer = makeOpaqueContainer(item: 12)
let twelve = opaqueContainer[0]
type(of: opaqueContainer) // [Int] or Container?? undrlaying vs public?
type(of: twelve)

let anotherOpaqueContainer = makeOpaqueContainer(item: "str")
let str = anotherOpaqueContainer[0]
type(of: str)

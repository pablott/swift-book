func makeArray<Item>(repeating item: Item, numberOfTimes: Int) -> [Item] {
    var result = [Item]()
    for _ in 0..<numberOfTimes {
        result.append(item)
    }
    return result
}

makeArray(repeating: "knock", numberOfTimes: 4)



//---------------
enum OptionalValue<Wrapped> {
    case none
    case some(Wrapped)
}

var possibleInteger: OptionalValue<Int> = .none
possibleInteger = .some(100)



//---------------
func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool
    where T.Element: Equatable, T.Element == U.Element
{
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
//                print(lhsItem,rhsItem)
                return true
            }
        }
    }
    return false
}

anyCommonElements([1, 2, 3], [3])



//---------------
func anyCommonElementsArray<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> [T.Element]
    where T.Element: Equatable, T.Element == U.Element
{
    var array: [T.Element] = []
    
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
//                print(lhsItem,rhsItem)
//                type(of: rhsItem)
                array.append(rhsItem)
            }
        }
    }
    return array
}

anyCommonElementsArray([1, 2, 3], [3])



//---------------
func anyCommonElementsArray2(seq1: [Int], seq2: [Int]) -> [Int] {
    var array: [Int] = []
    
    for ele1 in seq1 {
        for ele2 in seq2 {
            if ele1 == ele2 {
                array.append(ele2)
            }
        }
    }
    return array
}

anyCommonElementsArray2(seq1: [1, 2, 3, 4], seq2: [4])

//------------ ENUMERATIONS


enum CompassPoint {
    case north
    case south
    case east
    case west
}

type(of: CompassPoint.north)
var directionHead = CompassPoint.west
directionHead = .east


enum Planet {
    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
}


// USAGE IN SWITCH STATEMENTS
directionHead = .south
switch directionHead {
case .north:
    print("Lots of planets have a north")
case .south:
    print("Wath out for penguins")
case .east:
    print("Where the sun rises")
case .west:
    print("Where the skies are blue")
}


let somePlanet = Planet.earth
switch somePlanet {
case .earth:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
}


// ITERABLE

enum Beverage: CaseIterable {
    case coffee, tea, juice
}
Beverage.allCases.count
Beverage.allCases

for beverage in Beverage.allCases {
    print(beverage, terminator: ", ")
}


// ASSOCIATED VALUES

enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}

var productBarcode = Barcode.upc(8, 85909, 51226, 3)
productBarcode = .qrCode("ABCD")

// extraction
switch productBarcode {
case .upc(let numberSystem, let manufacturer, let product, let check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case .qrCode(let productCode):
    print("QR code: \(productCode)")
}

// extracting all values (same as above, just shorter)
switch productBarcode {
case let .upc(numberSystem, manufacturer, product, check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case let .qrCode(productCode):
    print("QR code: \(productCode)")
}


// RAW VALUES

enum ASCIIControlCharacer: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}

ASCIIControlCharacer.lineFeed.rawValue


// Implicitly assigned raw values
enum Food: Int {
    case tomato = 1, fish, meat
}
Food.tomato.rawValue
Food.fish.rawValue


enum Animal: String {
    case dog, cat, horse
}
Animal.dog.rawValue
type(of: Animal.dog)
type(of: Animal.dog.rawValue)


// Init from raw value
let possibleAnimal = Animal(rawValue: "dog")
type(of: possibleAnimal)

let possibleFood = Food(rawValue: 2)

// Ui=sing failable init for an optional binding
let positionToFind = 4
if let someFood = Food(rawValue: positionToFind) {
    switch someFood {
    case .fish:
        print("healthy")
    default:
        print("In the menu")
    }
} else {
    print("There isn't a planet at position \(positionToFind)")
}


// RECURSIVE ENUMERATORS

enum ArithmeticExpression {
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
}

let five = ArithmeticExpression.number(5)
type(of: five)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))


func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value // Ints 5, 4, 2
    case let .addition(left, right):
        left
        right
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        left
        right
        return evaluate(left) * evaluate(right)
    }
}
//evaluate(product)
type(of: evaluate(product)) // in the end al of them are Ints
